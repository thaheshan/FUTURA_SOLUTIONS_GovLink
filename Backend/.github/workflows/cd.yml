name: Deploy Backend to EKS (DEV)

on:
  push:
    branches: [dev] 
  workflow_dispatch:     

jobs:
  deploy:
    if: github.ref == 'refs/heads/dev'
    name: Deploy Backend to AWS EKS
    runs-on: ubuntu-latest

    environment: development

    env:
      REGION: ${{ secrets.AWS_REGION }}
      ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO: ${{ vars.ECR_BACKEND_REPO }}  

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $REGION | \
        docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com

    - name: Build and Push Docker Image
      run: |
        docker build -t $ECR_REPO .
        docker tag $ECR_REPO:latest $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO:latest
        docker push $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO:latest

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region $REGION --name insiderhub

    - name: Deploy Redis
      run: |        
        kubectl apply -f k8s/redis.yaml
    
    - name: Wait for Redis to be ready
      run: |        
        kubectl rollout status deployment/redis --timeout=600s
    
    - name: Run DB Migration Job
      run: |
        kubectl apply -f k8s/migration-job.yaml
        echo "Waiting for job to complete..."
        kubectl wait --for=condition=complete job/insiderhub-migrate --timeout=300s
        kubectl logs job/insiderhub-migrate

    - name: Delete Migration Job (Cleanup)
      run: |
        kubectl delete job insiderhub-migrate || true
      
    - name: Deploy to EKS
      run: |
        kubectl apply -f k8s/backend-dev.yaml        
        kubectl rollout restart deployment backend-dev
        kubectl rollout status deployment backend-dev --timeout=120s